#!/bin/bash
# Configuration script for setting up your Linux work environment. Aimed at
# Debian (see ./DEBIAN.md) but should also be able to setup the bare minimal
# install elsewhere. Once you run this, the script should be available on your
# path under `configure`, you can edit this with `viw configure` from anywhere.
#
# Usage:
# This development configuration is aimed for single terminal development (e.g
# avoiding using multiple splits/windows in tmux) in an effort forcing
# optimisation of development workflow by avoiding switching lots and in
# particular switching to viewing the entire output of a running development
# server as incremental development (running single tests on issues) is faster.
#
# Tools:
# This setup looks for a pretty bare minimum of tools required for development
# using Golang & Javascript.

set +e

############################################
# 1. setup variables                      #
############################################

[[ -z "${PLUGINS+x}" ]] && PLUGINS=(
  tpope/vim-fugitive
  tpope/vim-fireplace
  nvim-lua/plenary.nvim
  nvim-telescope/telescope.nvim
  nvim-treesitter/nvim-treesitter
  neovim/nvim-lspconfig
  mikepjb/lotus.nvim
)

# Override these by prefixing them e.g: `NEOVIM_REPO=internal-mirror.com/neovim ./build-neovim`
[[ -z "${NEOVIM_REPO+x}" ]] && NEOVIM_REPO="https://github.com/neovim/neovim/releases/download/v0.9.5/nvim-linux64.tar.gz"
[[ -z "${PLUGIN_URL_BASE+x}" ]] && PLUGIN_URL_BASE="https://github.com/"
[[ -z "${PLUGIN_URL_MIDDLE+x}" ]] && PLUGIN_URL_MIDDLE="/zipball/"
[[ -z "${PLUGIN_URL_END+x}" ]] && PLUGIN_URL_END=""
[[ -z "${PLUGIN_EXT+x}" ]] && PLUGIN_EXT="zip"
[[ -z "${PLUGIN_COMMIT+x}" ]] && PLUGIN_COMMIT="master"

[[ -z "${CONFIG_TMPDIR+x}" ]] && CONFIG_TMPDIR=$(mktemp -d)
NVIM_TARBALL=nvim-linux64.tar.gz
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

package_manager="none"
sudo="sudo"
vim_pkg="vim-gtk3"
[[ -z "${TMPDIR+x}" ]] && TMPDIR=/tmp

path_dirs=(
    $HOME/src/configure # configure repo home
    $HOME/go/bin # golang (GOPATH == HOME)
    $HOME/.local/bin # local scripts
    $HOME/.config/npm/bin # nodejs
    /usr/local/bin
    /usr/bin
    /bin
)

# essentials for working in a bash environment
core_tools=(
    vim # vim is essential, neovim is a luxury
    tmux
    bash
    bash-completion
    make # nice for making a 'table of contents' for projects
    curl
    openssh-client # usually available except on termux (maybe termux package is called openssh?)
    wget # already available on debian
)

# app tools (sqlite/golang/node)
application_tools=(
    golang
    sqlite3
    nodejs
    postgresql
)

# nice to have
user_tools=(
    gimp
    inkscape
    chromium
    docker
    htop # more graphical cli for top
    neofetch # standard way to inspect high level OS details
    systemd-boot # simpler system startup than grub
    libvirt-clients # used by gnome-boxes to detect virtualisation extensions that are enabled, will complain otherwise that they are disabled.
    apt-file # debian tool for listing files from package with `apt-file list package_name`
    yt-dlp # Youtube downloading tool
    obs-studio # Streaming software
    libguestfs-tools # virt-resize etc
)

# not used, just a reference - installed via flatpak
external_tools=(
    discord
    telegram-desktop
)

############################################
# 2. utility functions                     #
############################################

join_by() { local IFS="$1"; shift; echo "$*"; }
 
yes_or_no() {
    while true; do
        read -p "$* [y/n]: " yn
        case $yn in
            [Yy]*) return 0  ;;
            [Nn]*) echo "skipping step, continuing script.." ; return  1 ;;
        esac
    done
}

set_package_manager() {
    if [[ $(command -v pkg) ]]; then
        # android/termux, must come before debian/apt because apt is also available here but pkg is preferred.
        sudo=""
        vim_pkg="vim"
        package_manager="pkg"
        return 0
    elif [[ $(command -v apt) ]]; then
        package_manager="apt" # debian based distro
        return 0
    elif [[ $(command -v dnf) ]]; then
        package_manager="dnf" # redhat based distro
        return 0
    fi
    return 1
}

install_packages() {
  echo "$sudo $package_manager install $(join_by ' ' $@) $vim_pkg"
  $sudo $package_manager install $(join_by ' ' "$@") $vim_pkg
}

ensure_neovim() {
  echo 'nvim not found, downloading'
  # N.B for now we just go for the compiled linux binary
  curl -L -o $NVIM_TARBALL $NEOVIM_REPO
  tar -zxf $NVIM_TARBALL 
  mkdir -p $HOME/.local
  # here it's best to cp > mv because mv doesn't merge with existing directories
  # (e.g bin/lib folders that already exist), rsync is another option but cp is
  # always available.
  cp -r ./nvim-linux64/* $HOME/.local
}

ensure_neovim_config() {
    mkdir -p $HOME/.config/nvim
    if [[ -f $SCRIPT_DIR/init.lua ]]; then
        ln -sfv $SCRIPT_DIR/init.lua $HOME/.config/nvim/init.lua
    else
        echo 'could not find init.lua, download this seperately'
    fi
}

ensure_neovim_plugins() {
  echo 'downloading missing plugins'
  optional_deps_dir="$HOME/.config/nvim/pack/base/opt"
  mkdir -p $optional_deps_dir
  cd $optional_deps_dir
  for p in $(join_by ' ' "${PLUGINS[@]}"); do
    n=$(basename -- $p)
    if [ ! -d "$n" ]; then
      curl -L -o $n.$PLUGIN_EXT $PLUGIN_URL_BASE$p$PLUGIN_URL_MIDDLE$PLUGIN_COMMIT
      # N.B on this rare occasion = is an equality check not assignment
      if [[ "$PLUGIN_EXT" = "zip" ]]; then
        unzip $n.$PLUGIN_EXT
      else
        tar -zxf $n.$PLUGIN_EXT
      fi
      rm $n.$PLUGIN_EXT
      mv $(find . -type d -name "*$n*" | head -1) $n
    fi
  done
  cd -
}

ensure_dirs() {
  mkdir -p $HOME/src
  mkdir -p $HOME/.config
  mkdir -p $HOME/.local/bin
}

############################################
# 3. configuration steps                   #
############################################

cd $CONFIG_TMPDIR
pwd

ensure_dirs

cat >$HOME/.bashrc <<EOL
[[ $- =~ i ]] && stty -ixoff -ixon # Disable CTRL-S and CTRL-Q
 
export XDG_DATA_HOME=$HOME/.local/share
export XDG_CACHE_HOME=$HOME/.local/cache
export XDG_STATE_HOME=$HOME/.local/state
export XDG_CONFIG_HOME=$HOME/.config
export EDITOR=nvim
export PATH=$(join_by : "${path_dirs[@]}")
export GOPATH=$HOME/go
export CDPATH=".:$HOME/src"
export PAGER='less -S'
export SSH_AUTH_SOCK=$HOME/.ssh/ssh-agent.socket
export NPM_CONFIG_PREFIX=$HOME/.config/npm
export N_PREFIX=$HOME/.config/n
export LSCOLORS="ExGxBxDxCxEgEdxbxgxcxd"
export TERM='xterm-256color'
export TMPDIR=$TMPDIR

alias vi='nvim'
alias x='tmux attach -t vty || tmux new -s vty'
alias gr='cd \$(git rev-parse --show-toplevel || echo ".")'

viw() { vi \`which "\$1"\`; }
git_b() { echo -e "\$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')"; }
git_s() { git rev-parse --git-dir >/dev/null 2>&1 && echo -ne "(\$(git_br))"; }

PROMPT_COMMAND='PS1="\W\$(git_s) $ "'
EOL

mkdir -p $HOME/.config/tmux
cat >$HOME/.config/tmux/tmux.conf <<EOL
set -g history-limit 100000
set-window-option -g alternate-screen on
set -g status off
set -g lock-after-time 0
unbind C-b; set -g prefix C-q;
unbind space ; bind space list-windows
unbind v ; bind v split-window -c "#{pane_current_path}"
unbind s ; bind s split-window -h -c "#{pane_current_path}"
unbind x ; bind x kill-pane
set -gq utf-8 on;
set -g mouse on;
set -g set-clipboard external;
set -g pane-border-style fg=default,bg=default;
set -g pane-active-border-style fg=default,bg=default;
set -g message-style "fg=colour5,bg=default"
EOL

git_config() {
    echo 'Configuring git..'
    git config --global --replace-all core.editor 'nvim'
    git config --global --replace-all core.autocrlf false
    git config --global --replace-all init.defaultBranch 'main'
    git config --global --replace-all alias.aa 'add --all'
    git config --global --replace-all alias.br 'branch --sort=committerdate'
    git config --global --replace-all alias.st 'status'
    git config --global --replace-all alias.count 'shortlog -sn'
    git config --global --replace-all alias.ff 'pull --ff-only'
    git config --global --replace-all alias.co 'checkout'
    git config --global --replace-all alias.ci 'commit --verbose'
    git config --global --replace-all alias.di 'diff'
    git config --global --replace-all alias.dc 'diff --cached'
    git config --global --replace-all alias.amend 'commit --amend'
    git config --global --replace-all alias.ffa 'fetch --all && git rebase origin/master'
    git config --global --replace-all alias.push-new 'push -u origin HEAD'
    git config --global --replace-all alias.ra "log --abbrev-commit --pretty=format:'%<(7)%C(yellow)%h %Cgreen%<(15)%cr%C(bold cyan)%<(17)<%an>%C(red)%d %Creset %s'"
    printf "${WARN}Don't forget to set your user.name and user.email with git config --global user.name = <etc>${NC}\n"
}

gnome_config() {
    echo 'Setting gnome configuration...'
    # Set caps lock as control on Gnome Wayland
    gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier']"
    # step xb. tap to click (regular settings mousepad)
    # step xc. disable power button (main settings, cli)
}

ensure_go_tools() {
    command -v goimports || go install golang.org/x/tools/cmd/goimports@latest
    command -v gopls || go install golang.org/x/tools/cmd/gopls@latest
}

if set_package_manager; then
    yes_or_no "Install packages?" && install_packages ${core_tools[@]} ${application_tools[@]}
    if [[ "$DESKTOP_SESSION" = 'gnome' ]]; then
        gnome_config
        yes_or_no "Install user/GUI packages?" && install_packages ${user_tools[@]}
    fi
fi

git_config
command -v nvim || ensure_neovim # install neovim if not found on PATH
ensure_neovim_config && ensure_neovim_plugins
ensure_go_tools


# step xe. install firmware-realtek firmware-misc-nonfree (and ucode?)
#   - when compiling the kernel I had some warning pop up and it was just some nonfree software missing.
#   - run `update-initramfs -u` to recompile the Initial RAM filesystem (startup process for linux)

# EDITOR=vim virsh edit win11
# under vram, double the 3 values and save - it seems like you don't have enough memory by default to go 1440p ultrawidescreen.
